# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

hadoop_hosts = {
  "hdp1" => "192.168.50.51",
  "hdp2" => "192.168.50.52",
  "hdp3" => "192.168.50.53"
}

Vagrant.configure("2") do |config|

  # use the same key for each machine
  config.ssh.insert_key = false
  config.vm.boot_timeout = 60 

  # control machine for ansible
  config.vm.define "ctrl" do |ctrl|
    
    ctrl.vm.box = "centos/7"
    # ctrl.vm.box = "ubuntu/trusty64"
    ctrl.vm.hostname = "ctrl.jonczy.lan"
    ctrl.vm.network "private_network", ip: "192.168.50.50"

    ctrl.vm.provider "virtualbox" do |v|
        v.memory = 256
        v.cpus = 1
    end

    # configure keys to be used 
    # http://ermaker.github.io/blog/2015/11/18/change-insecure-key-to-my-own-key-on-vagrant.html
    ctrl.ssh.private_key_path = ["~/.ssh/id_rsa", "~/.vagrant.d/insecure_private_key"]
    ctrl.vm.provision "file", source: "~/.ssh/id_rsa.pub", destination: "~/.ssh/authorized_keys"
    ctrl.ssh.forward_agent = true

    # bootstrap control machine for ansible
    ctrl.vm.provision :shell, path: "bootstrap-ctrl.sh"

    ctrl.vm.synced_folder "../hadoop-hdp-ansible", "/vagrant_data"

  end

  # # machines for hadoop ecosystem
  # hadoop_hosts.each do |name, ip|
  #   config.vm.define name do |machine|
  #     machine.vm.box = "centos/7"
  #     machine.vm.hostname = "%s.jonczy.lan" % name
  #     machine.vm.network :private_network, ip: ip

  #     machine.vm.provider "virtualbox" do |v|
  #       v.name = name
  #       v.memory = 2048
  #       v.cpus = 2
  #     end

  #   end
  # end








  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  # config.vm.box = "base"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
